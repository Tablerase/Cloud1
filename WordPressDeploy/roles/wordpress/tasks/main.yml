- name: Create Docker Compose directory
  ansible.builtin.file:
    path: "{{ docker_compose_path }}"
    state: directory
    owner: "{{ project_user }}"
    group: "{{ project_user }}"
    mode: "0755"
  become: true
  register: wordpress_compose_dir_result
  tags:
    - wordpress
    - directory
    - create

- name: Validate required secret variables are set
  ansible.builtin.assert:
    that:
      - (mysql_root_password | default('')) | length > 0
      - (mysql_password | default('')) | length > 0
      - (wordpress_admin_password | default('')) | length > 0
    fail_msg: "One or more required secrets are empty. Ensure vault variables are set and decrypted."
    success_msg: "All required secrets are present."
  tags:
    - wordpress
    - secrets
    - validate

- name: Copy Docker Compose file
  ansible.builtin.template:
    src: docker-compose.yml.j2
    dest: "{{ docker_compose_path }}/docker-compose.yml"
    owner: "{{ project_user }}"
    group: "{{ project_user }}"
    mode: "0644"
  become: true
  register: wordpress_compose_file_result
  tags:
    - wordpress
    - templates

- name: Create secrets directory for compose
  ansible.builtin.file:
    path: "{{ docker_compose_path }}/secrets"
    state: directory
    owner: "{{ project_user }}"
    group: "{{ project_user }}"
    mode: "0700"
  tags:
    - wordpress
    - secrets

- name: Write MySQL root password secret file
  ansible.builtin.copy:
    dest: "{{ docker_compose_path }}/secrets/mysql_root_password"
    content: "{{ mysql_root_password | default('') }}\n"
    owner: "www-data"
    group: "www-data"
    mode: "0600"
  # no_log: true
  tags:
    - wordpress
    - secrets

- name: Write MySQL user password secret file
  ansible.builtin.copy:
    dest: "{{ docker_compose_path }}/secrets/mysql_password"
    content: "{{ mysql_password | default('') }}\n"
    owner: "www-data"
    group: "www-data"
    mode: "0600"
  # no_log: true
  tags:
    - wordpress
    - secrets

- name: Copy Nginx configuration file
  ansible.builtin.template:
    src: nginx.conf.j2
    dest: "{{ docker_compose_path }}/nginx.conf"
    owner: "{{ project_user }}"
    group: "{{ project_user }}"
    mode: "0644"
  become: true
  register: wordpress_nginx_config_result
  tags:
    - wordpress
    - nginx
    - templates

- name: Create certs directory for bootstrap
  ansible.builtin.file:
    path: "/etc/letsencrypt/live/{{ project_domain }}"
    state: directory
    owner: "{{ project_user }}"
    group: "{{ project_user }}"
    mode: "0755"
  become: true
  tags:
    - wordpress
    - certs

- name: Generate dummy self-signed certificate if none exists
  ansible.builtin.command: >
    openssl req -x509 -nodes -days 365 -newkey rsa:2048
      -keyout /etc/letsencrypt/live/{{ project_domain }}/privkey.pem
      -out /etc/letsencrypt/live/{{ project_domain }}/fullchain.pem
      -subj "/CN={{ project_domain }}"
  args:
    creates: "/etc/letsencrypt/live/{{ project_domain }}/fullchain.pem"
  become: true
  tags:
    - wordpress
    - certs

- name: Start Docker Compose services
  community.docker.docker_compose_v2:
    project_src: "{{ docker_compose_path }}"
    state: present # present (compose up), absent (compose down), stopped (compose stop), restarted (compose restart)
  become: true
  become_user: "{{ project_user }}"
  register: wordpress_compose_up_result
  tags:
    - wordpress
    - docker-compose

- name: Wait for MySQL container to be healthy
  community.docker.docker_container_info:
    name: "{{ mysql_container_name }}"
  become: true
  become_user: "{{ project_user }}"
  register: wordpress_mysql_container_info
  until: wordpress_mysql_container_info.container is defined and wordpress_mysql_container_info.container.State.Health.Status == "healthy"
  retries: 10 # 10 retries * 30s delay = 300s (5 minutes)
  delay: 30 # seconds
  tags:
    - wordpress
    - health-check

- name: Fail if MySQL container is not healthy
  ansible.builtin.fail:
    msg: "MySQL container {{ mysql_container_name }} failed health check or timed out"
  when: not wordpress_mysql_container_info.container or wordpress_mysql_container_info.container.State.Health.Status != "healthy"
  tags:
    - wordpress
    - health-check

- name: Wait for WordPress container to be healthy
  community.docker.docker_container_info:
    name: "{{ wordpress_container_name }}"
  become: true
  become_user: "{{ project_user }}"
  register: wordpress_container_info
  until: wordpress_container_info.container is defined and wordpress_container_info.container.State.Health.Status == "healthy"
  retries: 10 # 10 retries * 30s delay = 300s (5 minutes)
  delay: 30 # seconds
  tags:
    - wordpress
    - health-check

- name: Fail if WordPress container is not healthy
  ansible.builtin.fail:
    msg: "WordPress container {{ wordpress_container_name }} failed health check or timed out"
  when: not wordpress_container_info.container or wordpress_container_info.container.State.Health.Status != "healthy"
  tags:
    - wordpress
    - health-check

- name: Fix permissions on subdirectory
  community.docker.docker_container_exec:
    container: "{{ wordpress_container_name }}"
    command: chown -R www-data:www-data /var/www/html/wordpress
  become: true
  tags:
    - wordpress
    - wp-cli
    - permissions

- name: Check if WP-CLI is already installed
  community.docker.docker_container_exec:
    container: "{{ wordpress_container_name }}"
    command: wp --version
    user: "www-data"
  register: wordpress_cli_check
  failed_when: false
  changed_when: false
  become: true
  become_user: "{{ project_user }}"
  tags:
    - wordpress
    - wp-cli
    - check

- name: Install WP-CLI inside WordPress container
  community.docker.docker_container_exec:
    container: "{{ wordpress_container_name }}"
    command: curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
  when: wordpress_cli_check.rc != 0 # TODO: improve condition in case check fails
  tags:
    - wordpress
    - wp-cli
    - install

- name: Make WP-CLI executable
  community.docker.docker_container_exec:
    container: "{{ wordpress_container_name }}"
    command: chmod +x wp-cli.phar
  when: wordpress_cli_check.rc != 0
  become: true
  become_user: "{{ project_user }}"
  tags:
    - wordpress
    - wp-cli
    - install

- name: Move WP-CLI to PATH
  community.docker.docker_container_exec:
    container: "{{ wordpress_container_name }}"
    command: mv wp-cli.phar /usr/local/bin/wp
  when: wordpress_cli_check.rc != 0
  become: true
  become_user: "{{ project_user }}"
  tags:
    - wordpress
    - wp-cli
    - install

- name: Check if WordPress is already installed
  community.docker.docker_container_exec:
    container: "{{ wordpress_container_name }}"
    command: wp core is-installed --path=/var/www/html/wordpress
    user: "www-data"
  register: wordpress_is_installed
  failed_when: false
  changed_when: false
  become: true
  become_user: "{{ project_user }}"
  tags:
    - wordpress
    - wp-cli
    - install

- name: Install WordPress
  community.docker.docker_container_exec:
    container: "{{ wordpress_container_name }}"
    command: >
      bash -lc "wp core install
      --url=https://{{ project_domain }}/wordpress
      --title='{{ project_name }}'
      --admin_user='{{ wordpress_admin_user }}'
      --admin_password='{{ wordpress_admin_password }}'
      --admin_email='{{ wordpress_admin_email }}'
      --path=/var/www/html/wordpress"
    user: "www-data"
  when: wordpress_is_installed.rc != 0
  become: true
  become_user: "{{ project_user }}"
  no_log: true
  tags:
    - wordpress
    - wp-cli
    - install

################################################################################
# WordPress content setup (Home page + Front page + optional Site Icon)
################################################################################
- name: Check if site icon is already set
  community.docker.docker_container_exec:
    container: "{{ wordpress_container_name }}"
    command: >
      wp option get site_icon --path=/var/www/html/wordpress
    user: "www-data"
  register: wordpress_site_icon_option
  failed_when: false
  changed_when: false
  become: true
  become_user: "{{ project_user }}"
  tags:
    - wordpress
    - wp-cli
    - content

- name: Copy site icon to remote host temp (if provided)
  ansible.builtin.copy:
    src: "{{ wordpress_site_icon_src }}"
    dest: "/tmp/icon.png"
    mode: "0644"
  when: (wordpress_site_icon_src | default('')) != '' and (wordpress_site_icon_option.stdout | trim) in ['', '0']
  become: true
  tags:
    - wordpress
    - wp-cli
    - content

- name: Copy site icon into WordPress container (docker cp)
  ansible.builtin.command: >
    docker cp /tmp/icon.png {{ wordpress_container_name }}:/tmp/icon.png
  when: (wordpress_site_icon_src | default('')) != '' and (wordpress_site_icon_option.stdout | trim) in ['', '0']
  changed_when: true
  become: true
  tags:
    - wordpress
    - wp-cli
    - content

- name: Import site icon into WordPress and get ID
  community.docker.docker_container_exec:
    container: "{{ wordpress_container_name }}"
    command: >
      wp media import /tmp/icon.png --title="Favicon" --alt="Site Favicon"
      --porcelain --path=/var/www/html/wordpress
    user: "www-data"
  when: (wordpress_site_icon_src | default('')) != '' and (wordpress_site_icon_option.stdout | trim) in ['', '0']
  register: wordpress_icon_import
  become: true
  become_user: "{{ project_user }}"
  tags:
    - wordpress
    - wp-cli
    - content

- name: Set WordPress icon ID fact
  ansible.builtin.set_fact:
    wordpress_icon_id: "{{ wordpress_icon_import.stdout | trim }}"
  when:
    - (wordpress_site_icon_src | default('')) != ''
    - (wordpress_site_icon_option.stdout | trim) in ['', '0']
    - wordpress_icon_import.stdout is defined
    - wordpress_icon_import.stdout | trim != ''
  tags:
    - wordpress
    - wp-cli
    - content

- name: Set site icon option
  community.docker.docker_container_exec:
    container: "{{ wordpress_container_name }}"
    command: >
      wp option update site_icon "{{ wordpress_icon_id }}" --path=/var/www/html/wordpress
    user: "www-data"
  when:
    - (wordpress_site_icon_src | default('')) != ''
    - (wordpress_site_icon_option.stdout | trim) in ['', '0']
    - wordpress_icon_id is defined
  become: true
  become_user: "{{ project_user }}"
  tags:
    - wordpress
    - wp-cli
    - content

- name: Lookup existing Home page ID by slug
  community.docker.docker_container_exec:
    container: "{{ wordpress_container_name }}"
    command: >
      bash -lc "wp post list --post_type=page --pagename=home --field=ID --path=/var/www/html/wordpress"
    user: "www-data"
  register: wordpress_home_lookup
  changed_when: false
  failed_when: false
  become: true
  become_user: "{{ project_user }}"
  tags:
    - wordpress
    - wp-cli
    - content

- name: Create Home page if missing
  community.docker.docker_container_exec:
    container: "{{ wordpress_container_name }}"
    command: >
      wp post create
        --post_type=page
        --post_title='{{ wordpress_home_title }}'
        --post_name=home
        --post_status=publish
        --porcelain
        --path=/var/www/html/wordpress
    user: "www-data"
  when: (wordpress_home_lookup.stdout | trim) == ""
  register: wordpress_home_create
  become: true
  become_user: "{{ project_user }}"
  tags:
    - wordpress
    - wp-cli
    - content

- name: Determine Home page ID
  ansible.builtin.set_fact:
    wordpress_home_page_id: >-
      {{ (wordpress_home_lookup.stdout | trim) if (wordpress_home_lookup.stdout | trim) != '' else (wordpress_home_create.stdout | trim) }}
  tags:
    - wordpress
    - wp-cli
    - content

- name: Set home page content from file if specified
  ansible.builtin.set_fact:
    wordpress_home_content: "{{ lookup('file', wordpress_home_content_file) }}"
  when: wordpress_home_content_file is defined and wordpress_home_content_file != ''

- name: Update WordPress Home Page
  community.docker.docker_container_exec:
    container: "{{ wordpress_container_name }}"
    # The '-' tells wp-cli to read the content from stdin
    command: >
      wp post update {{ wordpress_home_page_id }} -
      --allow-root
      --path=/var/www/html/wordpress
    # Pass the content via the stdin parameter
    stdin: "{{ wordpress_home_content }}"
  when: wordpress_home_content is defined and wordpress_home_content | length > 0
  become: true
  become_user: "{{ project_user }}"
  tags:
    - wordpress
    - wp-cli
    - content

- name: Set front page to display a static page
  community.docker.docker_container_exec:
    container: "{{ wordpress_container_name }}"
    command: >
      wp option update show_on_front page --path=/var/www/html/wordpress
    user: "www-data"
  become: true
  become_user: "{{ project_user }}"
  tags:
    - wordpress
    - wp-cli
    - content

- name: Set Home page as the front page
  community.docker.docker_container_exec:
    container: "{{ wordpress_container_name }}"
    command: >
      wp option update page_on_front {{ wordpress_home_page_id }} --path=/var/www/html/wordpress
    user: "www-data"
  become: true
  become_user: "{{ project_user }}"
  tags:
    - wordpress
    - wp-cli
    - content

# todo: fix image implementation - not working
- name: Add featured image to home page
  community.docker.docker_container_exec:
    container: "{{ wordpress_container_name }}"
    command: >
      bash -lc 'wp post meta update {{ wordpress_home_page_id }} _thumbnail_id "$icon_id" --path=/var/www/html/wordpress'
    user: "www-data"
  when:
    - (wordpress_site_icon_src | default('')) != ''
    - (wordpress_site_icon_option.stdout | trim) in ['', '0']
    - (wordpress_home_page_id | default('')) != ''
  become: true
  become_user: "{{ project_user }}"
  tags:
    - wordpress
    - wp-cli
    - content

# TODO: possible improvement
# performance improvement with php-fpm-alpine if needed
# caching improvements with a custom image and caching plugins for WordPress (redis, memcached, etc.)
services:
    # MySQL Database doc: https://hub.docker.com/_/mysql
    mysql:
        image: mysql:lts
        container_name: {{ mysql_container_name }}
        restart: always
        environment:
            MYSQL_ROOT_PASSWORD_FILE: /run/secrets/mysql_root_password
            MYSQL_DATABASE: {{ mysql_database }}
            MYSQL_USER: {{ mysql_user }}
            MYSQL_PASSWORD_FILE: /run/secrets/mysql_password
        expose:
            - "{{ mysql_port }}"
        networks:
            - cloud1_network
        volumes:
            - mysql_data:/var/lib/mysql
        secrets:
            - mysql_root_password
            - mysql_password
        healthcheck:
            test: ["CMD-SHELL", "mysqladmin ping -h localhost -u {{ mysql_user }} -p\"$(cat /run/secrets/mysql_password)\""]
            interval: 30s
            retries: 5
            start_period: 30s
            timeout: 10s

    # WordPress doc: https://hub.docker.com/_/wordpress
    ## Additional config: https://github.com/docker-library/wordpress/pull/142
    ## Wordpress config: https://developer.wordpress.org/advanced-administration/wordpress/wp-config/
    ## /wordpress subdirectory setup : https://developer.wordpress.org/advanced-administration/server/wordpress-in-directory/
    wordpress:
        image: wordpress:6 
        container_name: {{ wordpress_container_name }}
        restart: always
        networks:
            - cloud1_network
        expose:
            - "{{ wordpress_port }}"
        depends_on:
            mysql:
                condition: service_healthy
                restart: true
        working_dir: /var/www/html/wordpress
        volumes:
            - wordpress_data:/var/www/html/
            - ./logs/wordpress/apache2:/var/log/apache2
        environment:
            WORDPRESS_DB_HOST: mysql:{{ mysql_port }}
            WORDPRESS_DB_USER: {{ mysql_user }}
            WORDPRESS_DB_PASSWORD_FILE: /run/secrets/mysql_password
            WORDPRESS_DB_NAME: {{ mysql_database }}
            WORDPRESS_CONFIG_EXTRA: |
                define( 'WP_SITEURL', 'https://{{ project_domain }}/wordpress' );
                define( 'WP_HOME', 'https://{{ project_domain }}/wordpress' );
                define( 'WP_CONTENT_URL', 'https://{{ project_domain }}/wordpress/wp-content' );
                define( 'FORCE_SSL_ADMIN', true );
        secrets:
            - mysql_password
        healthcheck:
            # -f returns an error on server errors (4xx, 5xx), but not on redirects (3xx).
            test: ["CMD", "curl", "-f", "http://localhost:80/wordpress/wp-login.php"]
            interval: 30s
            retries: 5
            start_period: 30s
            timeout: 10s


    # phpMyAdmin doc: https://hub.docker.com/_/phpmyadmin
    phpmyadmin:
        image: phpmyadmin:5
        container_name: {{ phpmyadmin_container_name }}
        restart: always
        environment:
            PMA_HOST: mysql
            APACHE_PORT: "{{ phpmyadmin_port }}"
            PMA_ABSOLUTE_URI: "http://{{ project_domain }}/myadmin"
        networks:
            - cloud1_network
        expose:
            - "{{ phpmyadmin_port }}"
        depends_on:
            - mysql

    # Nginx doc: https://hub.docker.com/_/nginx
    nginx:
        image: nginx:1.29.0
        container_name: {{ nginx_container_name }}
        restart: always
        networks:
            - cloud1_network
        ports:
            - "80:80"
            - "443:443"
        volumes:
            - /etc/letsencrypt:/etc/letsencrypt:ro
            - certbot_data:/var/www/certbot
            # - ./nginx.conf:/etc/nginx/nginx.conf:ro
            - ./nginx.conf:/etc/nginx/nginx.conf.final
            - ./nginx-init-certbot.conf:/etc/nginx/nginx.conf
            - ./logs/nginx:/var/log/nginx
        healthcheck:
            # Check that nginx is responding on port 80
            test: ["CMD", "curl", "-f", "http://localhost:80/"]
            interval: 30s
            timeout: 5s
            retries: 5
            start_period: 5s

    # Certbot doc: https://eff-certbot.readthedocs.io/en/stable/using.html#certbot
    ## Cmds: https://eff-certbot.readthedocs.io/en/stable/using.html#certbot-command-line-options
    certbot:
        image: certbot/certbot
        container_name: {{ certbot_container_name }}
        restart: always
        depends_on:
            nginx:
                condition: service_healthy
                restart: true
        volumes:
            - /etc/letsencrypt:/etc/letsencrypt
            - certbot_data:/var/www/certbot
            - ./logs/certbot:/var/log/letsencrypt
        entrypoint: ""
        command: >
            sh -c "
                # Prepare ACME challenge directory
                mkdir -p /var/www/certbot/.well-known/acme-challenge;
                
                # Check if certificates already exist
                if [ ! -f /etc/letsencrypt/live/{{ project_domain }}/fullchain.pem ]; then
                    echo 'Obtaining new certificates...'
                    certbot certonly --webroot --webroot-path=/var/www/certbot -n -d {{ project_domain }} --email {{ certbot_email }} --agree-tos --no-eff-email;
                else
                    echo 'Certificates already exist, skipping initial creation...'
                fi

                # Enter renewal loop - check every 12 hours (recommended), renew if needed (30 days before expiry)
                trap exit TERM;
                while :; do
                    echo 'Checking for certificate renewal...';
                    certbot renew --webroot --webroot-path=/var/www/certbot --quiet;
                    sleep 43200 & wait $${!};
                done
            "

networks:
    cloud1_network:
        driver: bridge

volumes:
    mysql_data:
    wordpress_data:
    certbot_data:

secrets:
    mysql_root_password:
        file: ./secrets/mysql_root_password
    mysql_password:
        file: ./secrets/mysql_password